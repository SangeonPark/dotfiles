- clean: ['~']

- link:
    ~/.profile: profile
    ~/.bashrc: bashrc
    ~/.bash_logout: bash_logout
    ~/.gitconfig: gitconfig
    ~/.ssh/config:
        path: ssh/config
        create: true
    ~/.zshrc: zshrc
    ~/.p10k.zsh: p10k.zsh
    ~/.tmux.conf: tmux.conf

- shell:
  - [git submodule update --init --recursive, Installing submodules]
  -
    command: |
      if command -v sudo &> /dev/null; then
        echo "sudo already available"
      elif [ "$EUID" -eq 0 ]; then
        apt-get update && apt-get install -y sudo
      elif su -c 'apt-get update && apt-get install -y sudo' 2>/dev/null; then
        echo "sudo installed via su"
      else
        echo "Cannot install sudo. Please install manually or run as root."
        echo "Continuing anyway - sudo may already be available..."
      fi
    description: Ensure sudo is available (multiple fallback methods)
    stdout: true
  - [sudo apt-get install -y less nano htop ncdu nvtop lsof rsync btop jq bat zsh tmux, Install essential Linux utilities psmisc]
  
  # Install lsd only if not already installed
  -
    command: |
      if ! command -v lsd &> /dev/null; then
        wget https://github.com/lsd-rs/lsd/releases/download/v1.1.5/lsd_1.1.5_amd64.deb && 
        sudo dpkg -i lsd_1.1.5_amd64.deb &&
        rm -rf lsd_1.1.5_amd64.deb
      else
        echo "lsd already installed, skipping..."
      fi
    description: Download and install lsd (if not already installed)
    stdout: true
  
  # Setup Python environment with uv, virtual environment, and packages
  #- [./setup_python.sh, Setup Python environment with uv, virtual environment, and packages]

  # Change shell only if not already zsh
  -
    command: |
      if [ "$SHELL" != "$(which zsh)" ]; then
        sudo usermod -s $(which zsh) $USER
      else
        echo "Shell already set to zsh, skipping..."
      fi
    description: Change default shell to ZSH (if not already set)
    stdout: true
  
  -
    command: echo " --------- INSTALLING DEPENDENCIES ⏳ ----------- "
    description: Display dependencies installation header
    stdout: true
  
  # Install Oh My Zsh only if not already installed
  -
    command: |
      if [ ! -d "$HOME/.oh-my-zsh" ]; then
        sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended
      else
        echo "Oh My Zsh already installed, skipping..."
      fi
    description: Install Oh My Zsh in unattended mode (if not already installed)
    stdout: true
  
  # Install Powerlevel10k only if not already installed
  -
    command: |
      if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k" ]; then
        git clone https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
      else
        echo "Powerlevel10k already installed, skipping..."
      fi
    description: Install Powerlevel10k theme (if not already installed)
    stdout: true
  
  # Install ZSH plugins only if not already installed
  -
    command: |
      if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting" ]; then
        git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting
      else
        echo "ZSH syntax highlighting already installed, skipping..."
      fi
    description: Install ZSH syntax highlighting plugin (if not already installed)
    stdout: true
  
  -
    command: |
      if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions" ]; then
        git clone https://github.com/zsh-users/zsh-autosuggestions ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-autosuggestions
      else
        echo "ZSH autosuggestions already installed, skipping..."
      fi
    description: Install ZSH autosuggestions plugin (if not already installed)
    stdout: true
  
  -
    command: |
      if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-completions" ]; then
        git clone https://github.com/zsh-users/zsh-completions ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-completions
      else
        echo "ZSH completions already installed, skipping..."
      fi
    description: Install ZSH completions plugin (if not already installed)
    stdout: true
  
  -
    command: |
      if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-history-substring-search" ]; then
        git clone https://github.com/zsh-users/zsh-history-substring-search ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/zsh-history-substring-search
      else
        echo "ZSH history substring search already installed, skipping..."
      fi
    description: Install ZSH history substring search plugin (if not already installed)
    stdout: true
  
  -
    command: |
      if [ ! -d "${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/you-should-use" ]; then
        git clone https://github.com/MichaelAquilina/zsh-you-should-use.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/plugins/you-should-use
      else
        echo "ZSH you-should-use already installed, skipping..."
      fi
    description: Install ZSH you-should-use plugin (if not already installed)
    stdout: true
  
  # Install tmux theme pack only if not already installed
  -
    command: |
      if [ ! -d "$HOME/.tmux-themepack" ]; then
        git clone https://github.com/jimeh/tmux-themepack.git ~/.tmux-themepack
      else
        echo "tmux theme pack already installed, skipping..."
      fi
    description: Install tmux theme pack (if not already installed)
    stdout: true
  
  # Install fzf only if not already installed
  -
    command: |
      if [ ! -d "$HOME/.fzf" ]; then
        git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && ~/.fzf/install --all
      else
        echo "fzf already installed, skipping..."
      fi
    description: Install fzf (if not already installed)
    stdout: true
  # Install Node.js only if not already installed
  -
    command: |
      if ! command -v node &> /dev/null; then
        curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
        sudo apt-get install -y nodejs
        echo "Node.js $(node --version) installed successfully"
      else
        echo "Node.js already installed: $(node --version)"
      fi
    description: Install Node.js LTS (if not already installed)
    stdout: true

  # Install Claude Code only if not already installed
  -
    command: |
      if ! command -v claude &> /dev/null; then
        npm install -g @anthropic-ai/claude-code
        echo "Claude Code installed successfully"
      else
        echo "Claude Code already installed: $(claude-code --version)"
      fi
    description: Install Claude Code CLI tool (if not already installed)
    stdout: true
  -
    command: |
      if [ -d "/workspace" ]; then
        if [ ! -e ~/.cache/huggingface ]; then
          mkdir -p ~/.cache
          mkdir -p /workspace/huggingface_cache
          ln -s /workspace/huggingface_cache ~/.cache/huggingface
          echo "Created symlink: ~/.cache/huggingface -> /workspace/huggingface_cache"
        else
          echo "~/.cache/huggingface already exists, skipping symlink creation"
        fi
      else
        echo "/workspace directory not found, skipping huggingface cache symlink"
      fi
    description: Create huggingface cache symlink (if /workspace exists and symlink doesn't exist)
    stdout: true
  -
    command: |
      if command -v batcat &> /dev/null; then
        if [ ! -L ~/.local/bin/bat ] && [ ! -f ~/.local/bin/bat ]; then
          mkdir -p ~/.local/bin
          ln -s /usr/bin/batcat ~/.local/bin/bat
          echo "Created symlink: ~/.local/bin/bat -> /usr/bin/batcat"
        else
          echo "bat command already available, skipping symlink creation"
        fi
      else
        echo "batcat not found, cannot create bat symlink"
      fi
    description: Create bat symlink to batcat (if batcat exists and bat doesn't)
    stdout: true

  -
    command: |
      if [ ! -f ~/.local/bin/env ]; then
        mkdir -p ~/.local/bin && printf '#!/bin/sh\n# add binaries to PATH if they aren'\''t added yet\n# affix colons on either side of $PATH to simplify matching\ncase ":${PATH}:" in\n    *:"$HOME/.local/bin":*)\n        ;;\n    *)\n        # Prepending path in case a system-installed binary needs to be overridden\n        export PATH="$HOME/.local/bin:$PATH"\n        ;;\nesac\n' > ~/.local/bin/env && chmod +x ~/.local/bin/env
        echo "Created ~/.local/bin/env"
      else
        echo "~/.local/bin/env already exists, skipping..."
      fi
    description: Create ~/.local/bin/env script for PATH management (if not exists)
    stdout: true

  - [source zshrc]  
  
